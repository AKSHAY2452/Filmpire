[{"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\index.js":"1","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\app\\store.js":"2","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\utils\\ToggleColorMode.jsx":"3","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\App.jsx":"4","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\features\\currentGenreOrCategory.js":"5","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\services\\TMDB.js":"6","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\features\\auth.js":"7","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\styles.js":"8","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Alan.jsx":"9","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\index.js":"10","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\utils\\index.js":"11","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\RatedCards\\RatedCards.jsx":"12","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieList\\MovieList.jsx":"13","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movie\\Movie.jsx":"14","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Sidebar\\Sidebar.jsx":"15","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Pagination\\Pagination.jsx":"16","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Search\\Search.jsx":"17","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Profile\\Profile.jsx":"18","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\NavBar\\NavBar.jsx":"19","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movies\\Movies.jsx":"20","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieInformation\\MovieInformation.jsx":"21","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Actors\\Actors.jsx":"22","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\RatedCards\\styles.js":"23","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Sidebar\\styles.js":"24","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Pagination\\styles.js":"25","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Search\\styles.js":"26","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movie\\styles.js":"27","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\NavBar\\styles.js":"28","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Actors\\styles.js":"29","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieInformation\\styles.js":"30","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\assets\\genres\\index.js":"31","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieList\\styles.js":"32"},{"size":592,"mtime":1658215367447,"results":"33","hashOfConfig":"34"},{"size":400,"mtime":1657517790097,"results":"35","hashOfConfig":"34"},{"size":763,"mtime":1658215227314,"results":"36","hashOfConfig":"34"},{"size":1029,"mtime":1658294797489,"results":"37","hashOfConfig":"34"},{"size":598,"mtime":1657430817062,"results":"38","hashOfConfig":"34"},{"size":2427,"mtime":1658214115915,"results":"39","hashOfConfig":"34"},{"size":612,"mtime":1657517786479,"results":"40","hashOfConfig":"34"},{"size":253,"mtime":1658120196367,"results":"41","hashOfConfig":"34"},{"size":1733,"mtime":1658294771802,"results":"42","hashOfConfig":"34"},{"size":649,"mtime":1658213440878,"results":"43","hashOfConfig":"34"},{"size":1092,"mtime":1657517793064,"results":"44","hashOfConfig":"34"},{"size":612,"mtime":1658213801063,"results":"45","hashOfConfig":"34"},{"size":470,"mtime":1657865564974,"results":"46","hashOfConfig":"34"},{"size":1060,"mtime":1657429713032,"results":"47","hashOfConfig":"34"},{"size":2794,"mtime":1658215908098,"results":"48","hashOfConfig":"34"},{"size":1002,"mtime":1658118584257,"results":"49","hashOfConfig":"34"},{"size":1232,"mtime":1658119817243,"results":"50","hashOfConfig":"34"},{"size":1794,"mtime":1658213796491,"results":"51","hashOfConfig":"34"},{"size":3568,"mtime":1658215678355,"results":"52","hashOfConfig":"34"},{"size":1453,"mtime":1658119166014,"results":"53","hashOfConfig":"34"},{"size":8176,"mtime":1658214451254,"results":"54","hashOfConfig":"34"},{"size":2558,"mtime":1658118899339,"results":"55","hashOfConfig":"34"},{"size":85,"mtime":1658213805026,"results":"56","hashOfConfig":"34"},{"size":396,"mtime":1658215911973,"results":"57","hashOfConfig":"34"},{"size":331,"mtime":1658117908463,"results":"58","hashOfConfig":"34"},{"size":481,"mtime":1657430391017,"results":"59","hashOfConfig":"34"},{"size":777,"mtime":1658718891383,"results":"60","hashOfConfig":"34"},{"size":743,"mtime":1658120979247,"results":"61","hashOfConfig":"34"},{"size":219,"mtime":1657949364783,"results":"62","hashOfConfig":"34"},{"size":1754,"mtime":1657866779558,"results":"63","hashOfConfig":"34"},{"size":1138,"mtime":1634322026000,"results":"64","hashOfConfig":"34"},{"size":306,"mtime":1657116202505,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},"tqpwnn",{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\index.js",["139","140"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { Provider } from \"react-redux\";\n\nimport ToggleColorModeProvider from \"./utils/ToggleColorMode\";\nimport App from \"./components/App\";\nimport store from \"./app/store\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <ToggleColorModeProvider>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </ToggleColorModeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\app\\store.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\utils\\ToggleColorMode.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\App.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\features\\currentGenreOrCategory.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\services\\TMDB.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\features\\auth.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Alan.jsx",["141","142"],"import React, { useEffect, useContext } from \"react\";\r\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { selectGenreOrCategory, searchMovie } from \"../features/currentGenreOrCategory\";\r\nimport { ColorModeContext } from \"../utils/ToggleColorMode\";\r\nimport { fetchToken } from \"../utils\";\r\n\r\nconst useAlan = () => {\r\n  const { setMode } = useContext(ColorModeContext);\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    alanBtn({\r\n      key: \"67c1bce4cb05008eef21f4d87619af332e956eca572e1d8b807a3e2338fdd0dc/stage\",\r\n      onCommand: ({ command, mode, genres, genreOrCategory, query }) => {\r\n        if (command === \"chooseGenre\") {\r\n          const foundGenre = genres.find((g) => g.name.toLowerCase() === genreOrCategory.toLowerCase());\r\n\r\n          if (foundGenre) {\r\n            history.push(\"/\");\r\n            dispatch(selectGenreOrCategory(foundGenre.id));\r\n          } else {\r\n            const category = genreOrCategory.startsWith(\"top\") ? \"top_rated\" : genreOrCategory;\r\n            history.push(\"/\");\r\n            dispatch(selectGenreOrCategory(category));\r\n          }\r\n        } else if (command === \"changeMode\") {\r\n          if (mode === \"light\") {\r\n            setMode(\"light\");\r\n          } else {\r\n            setMode(\"dark\");\r\n          }\r\n        } else if (command === \"login\") {\r\n          fetchToken();\r\n        } else if (command === \"logout\") {\r\n          localStorage.clear();\r\n          history.push(\"/\");\r\n        } else if (command === \"search\") {\r\n          dispatch(searchMovie(query));\r\n        }\r\n      },\r\n    });\r\n  }, []);\r\n};\r\n\r\nexport default useAlan;\r\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\index.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\utils\\index.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\RatedCards\\RatedCards.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieList\\MovieList.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movie\\Movie.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Sidebar\\Sidebar.jsx",["143","144","145","146"],"import React, { useState } from \"react\";\r\nimport { Divider, List, ListItem, ListItemText, ListSubheader, ListItemIcon, Box, CircularProgress } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport useStyles from \"./styles\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { selectGenreOrCategory } from \"../../features/currentGenreOrCategory\";\r\nimport { useGetGenresQuery } from \"../../services/TMDB\";\r\nimport genreIcons from \"../../assets/genres\";\r\n\r\nconst categories = [\r\n  { Label: \"Popular\", value: \"popular\" },\r\n  { Label: \"Top Rated\", value: \"top_rated\" },\r\n  { Label: \"Upcoming\", value: \"upcoming\" },\r\n];\r\n\r\nconst redLogo = \"https://fontmeme.com/permalink/210930/8531c658a743debe1e1aa1a2fc82006e.png\";\r\n\r\nconst blueLogo = \"https://fontmeme.com/permalink/210930/6854ae5c7f76597cf8680e48a2c8a50a.png\";\r\n\r\nconst Sidebar = ({ setMobileOpen }) => {\r\n  const { genreIdOrCategoryName } = useSelector((state) => state.currentGenreOrCategory);\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { data, isFetching } = useGetGenresQuery();\r\n  //dispatch used to transfer data from our component to redux\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <>\r\n      <Link to=\"/\" className={classes.imageLink}>\r\n        <img className={classes.image} src={theme.palette.mode === \"light\" ? redLogo : blueLogo} alt=\"Filmpire Logo\" />\r\n      </Link>\r\n      <Divider />\r\n      <List>\r\n        <ListSubheader>Categories</ListSubheader>\r\n        {categories.map(({ Label, value }) => (\r\n          <Link key={value} className={classes.links} to=\"/\">\r\n            <ListItem onClick={() => dispatch(selectGenreOrCategory(value))} button>\r\n              <ListItemIcon>\r\n                <img src={genreIcons[Label.toLowerCase()]} className={classes.genreImage} height={30} />\r\n              </ListItemIcon>\r\n              <ListItemText primary={Label} />\r\n            </ListItem>\r\n          </Link>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        <ListSubheader>Genres</ListSubheader>\r\n\r\n        {isFetching ? (\r\n          <Box display=\"Flex\" justifyContent=\"center\">\r\n            <CircularProgress />\r\n          </Box>\r\n        ) : (\r\n          data.genres.map(({ name, id }) => (\r\n            <Link key={name} className={classes.links} to=\"/\">\r\n              <ListItem onClick={() => dispatch(selectGenreOrCategory(id))} button>\r\n                <ListItemIcon>\r\n                  <img src={genreIcons[name.toLowerCase()]} className={classes.genreImage} height={30} />\r\n                </ListItemIcon>\r\n                <ListItemText primary={name} />\r\n              </ListItem>\r\n            </Link>\r\n          ))\r\n        )}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Pagination\\Pagination.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Search\\Search.jsx",["147","148"],"import React, { useState, useEffect } from \"react\";\r\nimport { TextField, InputAdornment } from \"@mui/material\";\r\nimport { Search as SearchIcon } from \"@mui/icons-material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport { searchMovie } from \"../../features/currentGenreOrCategory\";\r\nimport useStyles from \"./styles\";\r\n\r\nconst Search = () => {\r\n  const classes = useStyles();\r\n  const [query, setQuery] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const location = useLocation();\r\n\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      dispatch(searchMovie(query));\r\n    }\r\n  };\r\n\r\n  if (location.pathname !== \"/\") return null;\r\n\r\n  return (\r\n    <div className={classes.searchContainer}>\r\n      <TextField\r\n        onKeyPress={handleKeyPress}\r\n        value={query}\r\n        onChange={(e) => setQuery(e.target.value)}\r\n        variant=\"standard\"\r\n        InputProps={{\r\n          className: classes.input,\r\n          startAdornment: (\r\n            <InputAdornment position=\"start\">\r\n              <SearchIcon />\r\n            </InputAdornment>\r\n          ),\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Profile\\Profile.jsx",["149"],"import React, { useEffect } from \"react\";\nimport { Typography, Button, Box } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { ExitToApp } from \"@mui/icons-material\";\n\nimport { useGetListQuery } from \"../../services/TMDB\";\nimport { userSelector } from \"../../features/auth\";\nimport { RatedCards } from \"..\";\n\nconst Profile = () => {\n  const { user } = useSelector(userSelector);\n\n  const { data: favoriteMovies, refetch: refetchFavorites } = useGetListQuery({ listName: \"favorite/movies\", accountId: user.id, sessionId: localStorage.getItem(\"session_id\"), page: 1 });\n  const { data: watchlistMovies, refetch: refetchWatchlisted } = useGetListQuery({ listName: \"watchlist/movies\", accountId: user.id, sessionId: localStorage.getItem(\"session_id\"), page: 1 });\n\n  //refetch is used because when we unwatchlist then to update it on profile page we need to reload to update instantly we use refetch\n  useEffect(() => {\n    refetchFavorites();\n    refetchWatchlisted();\n  }, []);\n\n  const logout = () => {\n    localStorage.clear();\n\n    window.location.href = \"/\";\n  };\n\n  return (\n    <Box>\n      <Box display=\"flex\" justifyContent=\"space-between\">\n        <Typography variant=\"h4\" gutterBottom>\n          My Profile\n        </Typography>\n        <Button color=\"inherit\" onClick={logout}>\n          Logout &nbsp; <ExitToApp />\n        </Button>\n      </Box>\n      {!favoriteMovies?.results?.length && !watchlistMovies?.results?.length ? (\n        <Typography variant=\"h5\">Add favorites or watchlist some movies to see them here!</Typography>\n      ) : (\n        <Box>\n          <RatedCards title=\"Favorite Movies\" data={favoriteMovies} />\n          <RatedCards title=\"Watchlist\" data={watchlistMovies} />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default Profile;\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\NavBar\\NavBar.jsx",["150"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { AppBar, IconButton, Toolbar, Drawer, Button, Avatar, useMediaQuery } from \"@mui/material\";\nimport { Menu, AccountCircle, Brightness4, Brightness7 } from \"@mui/icons-material\";\nimport { Link } from \"react-router-dom\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { ColorModeContext } from \"../../utils/ToggleColorMode\";\nimport { setUser, userSelector } from \"../../features/auth\";\nimport { Sidebar, Search } from \"..\";\nimport { fetchToken, createSessionId, moviesApi } from \"../../utils\";\nimport useStyles from \"./styles\";\n\nconst NavBar = () => {\n  const { isAuthenticated, user } = useSelector(userSelector);\n  const [mobileOpen, setMobileOpen] = useState(false);\n  const classes = useStyles();\n  const isMobile = useMediaQuery(\"(max-width:600px)\");\n  const theme = useTheme();\n  const dispatch = useDispatch();\n\n  const colorMode = useContext(ColorModeContext);\n\n  const token = localStorage.getItem(\"request_token\");\n  const sessionIdFromLocalStorage = localStorage.getItem(\"session_id\");\n\n  useEffect(() => {\n    const logInUser = async () => {\n      if (token) {\n        if (sessionIdFromLocalStorage) {\n          const { data: userData } = await moviesApi.get(`/account?session_id=${sessionIdFromLocalStorage}`);\n          dispatch(setUser(userData));\n        } else {\n          const sessionId = await createSessionId();\n\n          const { data: userData } = await moviesApi.get(`/account?session_id=${sessionId}`);\n          dispatch(setUser(userData));\n        }\n      }\n    };\n\n    logInUser();\n  }, [token]);\n\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar className={classes.toolbar}>\n          {isMobile && (\n            <IconButton color=\"inherit\" edge=\"start\" style={{ outline: \"none\" }} onClick={() => setMobileOpen((prevMobileOpen) => !prevMobileOpen)} className={classes.menuButton}>\n              <Menu />\n            </IconButton>\n          )}\n          <IconButton color=\"inherit\" sx={{ ml: 1 }} onClick={colorMode.toggleColorMode}>\n            {theme.palette.mode === \"dark\" ? <Brightness7 /> : <Brightness4 />}\n          </IconButton>\n          {!isMobile && <Search />}\n          <div>\n            {!isAuthenticated ? (\n              <Button color=\"inherit\" onClick={fetchToken}>\n                Login &nbsp; <AccountCircle />\n              </Button>\n            ) : (\n              <Button color=\"inherit\" component={Link} to={`/profile/${user.id}`} className={classes.linkButton} onClick={() => {}}>\n                {!isMobile && <> My Movies &nbsp;</>}\n                <Avatar style={{ width: 30, height: 30 }} alt=\"Profile\" src=\"https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_1280.png\" />\n              </Button>\n            )}\n          </div>\n          {isMobile && <Search />}\n        </Toolbar>\n      </AppBar>\n      <div>\n        <nav className={classes.drawer}>\n          {isMobile ? (\n            <Drawer variant=\"temporary\" anchor=\"right\" open={mobileOpen} onClose={() => setMobileOpen((prevMobileOpen) => !prevMobileOpen)} classes={{ paper: classes.drawerPaper }} ModelProps={{ keepMounted: true }}>\n              <Sidebar setMobileOpen={setMobileOpen}></Sidebar>\n            </Drawer>\n          ) : (\n            <Drawer classes={{ paper: classes.drawerPaper }} variant=\"permanent\" open>\n              <Sidebar setMobileOpen={setMobileOpen}></Sidebar>\n            </Drawer>\n          )}\n        </nav>\n      </div>\n    </>\n  );\n};\n\nexport default NavBar;\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movies\\Movies.jsx",["151","152"],"import React, { useState, useEffect } from \"react\";\nimport { Box, CircularProgress, useMediaQuery, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectGenreOrCategory } from \"../../features/currentGenreOrCategory\";\n\nimport { useGetMoviesQuery } from \"../../services/TMDB\";\nimport { MovieList } from \"..\";\nimport { Pagination } from \"..\";\n\nconst Movies = () => {\n  const [page, setPage] = useState(1);\n  const { genreIdOrCategoryName, searchQuery } = useSelector((state) => state.currentGenreOrCategory);\n  const { data, error, isFetching } = useGetMoviesQuery({ genreIdOrCategoryName, page, searchQuery });\n  const lg = useMediaQuery((theme) => theme.breakpoints.only(\"lg\"));\n\n  const numberOfMovies = lg ? 16 : 18;\n\n  if (isFetching) {\n    return (\n      <Box display=\"Flex\" justifyContent=\"center\">\n        <CircularProgress size=\"4rem\" />\n      </Box>\n    );\n  }\n\n  if (!data.results.length) {\n    return (\n      <Box display=\"Flex\" alignItems=\"center\" mt=\"20px\">\n        <Typography variant=\"h4\">\n          No movies that match that name.\n          <br />\n          Please search for something else.\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) return \"error has occured\";\n\n  return (\n    <div>\n      <MovieList movies={data} numberOfMovies={numberOfMovies} />\n      <Pagination currentPage={page} setPage={setPage} totalPages={data.total_pages} />\n    </div>\n  );\n};\n\nexport default Movies;\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieInformation\\MovieInformation.jsx",["153","154","155"],"import React, { useState, useEffect } from \"react\";\nimport { Modal, Typography, Button, ButtonGroup, Grid, useMediaQuery, Box, CircularProgress, Rating } from \"@mui/material\";\nimport { Movie as MovieIcon, Theaters, Language, PlusOne, Favorite, FavoriteBorderOutlined, Remove, ArrowBack } from \"@mui/icons-material\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport axios from \"axios\";\n\nimport { selectGenreOrCategory } from \"../../features/currentGenreOrCategory\";\nimport useStyles from \"./styles\";\nimport { useGetMovieQuery, useGetRecommendationsQuery, useGetListQuery } from \"../../services/TMDB\";\nimport genreIcons from \"../../assets/genres\";\nimport { MovieList } from \"..\";\nimport { userSelector } from \"../../features/auth\";\n\nconst MovieInformation = () => {\n  const { genreIdOrCategoryName } = useSelector((state) => state.currentGenreOrCategory);\n  const { user } = useSelector(userSelector);\n  const { id } = useParams();\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [open, setOpen] = useState(false);\n\n  const { data, isFetching, error } = useGetMovieQuery(id);\n  const { data: favoriteMovies } = useGetListQuery({ listName: \"favorite/movies\", accountId: user.id, sessionId: localStorage.getItem(\"session_id\"), page: 1 });\n  const { data: watchlistMovies } = useGetListQuery({ listName: \"watchlist/movies\", accountId: user.id, sessionId: localStorage.getItem(\"session_id\"), page: 1 });\n  const { data: recommendations, isFetching: isRecommendationsFetching } = useGetRecommendationsQuery({ list: \"/recommendations\", movie_id: id });\n\n  const [isMovieFavorited, setIsMovieFavorited] = useState(false);\n  const [isMovieWatchlisted, setIsMovieWatchlisted] = useState(false);\n\n  useEffect(() => {\n    setIsMovieFavorited(!!favoriteMovies?.results?.find((movie) => movie?.id === data?.id));\n  }, [favoriteMovies, data]);\n\n  useEffect(() => {\n    setIsMovieWatchlisted(!!watchlistMovies?.results?.find((movie) => movie?.id === data?.id));\n  }, [watchlistMovies, data]);\n\n  const addToFavorites = async () => {\n    await axios.post(`https://api.themoviedb.org/3/account/${user.id}/favorite?api_key=${process.env.REACT_APP_TMDB_KEY}&session_id=${localStorage.getItem(\"session_id\")}`, {\n      media_type: \"movie\",\n      media_id: id,\n      favorite: !isMovieFavorited,\n    });\n\n    setIsMovieFavorited((prev) => !prev);\n  };\n\n  console.log({ isMovieWatchlisted });\n\n  const addToWatchlist = async () => {\n    await axios.post(`https://api.themoviedb.org/3/account/${user.id}/watchlist?api_key=${process.env.REACT_APP_TMDB_KEY}&session_id=${localStorage.getItem(\"session_id\")}`, {\n      media_type: \"movie\",\n      media_id: id,\n      watchlist: !isMovieWatchlisted,\n    });\n\n    setIsMovieWatchlisted((prev) => !prev);\n  };\n\n  if (isFetching) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <CircularProgress size=\"8rem\" />\n      </Box>\n    );\n  }\n  if (error) {\n    return (\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <Link to=\"/\">Something is wrong, Go back</Link>\n      </Box>\n    );\n  }\n\n  return (\n    <Grid container className={classes.containerSpaceAround}>\n      <Grid item sm={12} lg={4}>\n        <img className={classes.poster} src={`https://image.tmdb.org/t/p/w500/${data?.poster_path}`} alt={data?.title} />\n      </Grid>\n      <Grid item container direction=\"column\" lg={7}>\n        <Typography variant=\"h4\" align=\"center\" gutterBottom=\"true\">\n          {data?.title} ({data.release_date.split(\"-\")[0]})\n        </Typography>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom=\"true\">\n          {data?.tagline}\n        </Typography>\n        <Grid item className={classes.containerSpaceAround}>\n          <Box>\n            <Rating readOnly value={data.vote_average / 2} />\n            <Typography variant=\"h9\" gutterBottom=\"true\" style={{ marginleft: \"10px\" }}>\n              {data?.vote_average} / 10\n            </Typography>\n          </Box>\n          <Typography variant=\"h6\" align=\"center\" gutterBottom=\"true\">\n            {data?.runtime}min | Language: {data?.spoken_languages[0].name}\n          </Typography>\n        </Grid>\n        <Grid item className={classes.genresContainer}>\n          {data?.genres?.map((genre) => (\n            <Link key={genre.name} className={classes.links} to=\"/\" onClick={() => dispatch(selectGenreOrCategory(genre.id))}>\n              <img src={genreIcons[genre.name.toLowerCase()]} alt=\"\" className={classes.genreImage} height={30} />\n              <Typography color=\"textPrimary\" variant=\"subtitle1\">\n                {genre?.name}\n              </Typography>\n            </Link>\n          ))}\n        </Grid>\n        <Typography variant=\"h5\" gutterBottom style={{ marginTop: \"10px\" }}>\n          Overview\n        </Typography>\n        <Typography style={{ marginBottom: \"2rem\" }}>{data?.overview}</Typography>\n        <Typography variant=\"h5\" gutterBottom>\n          Top Cast\n        </Typography>\n        <Grid item container spacing={2}>\n          {data &&\n            data.credits.cast\n              .map(\n                (character, i) =>\n                  character.profile_path && (\n                    <Grid key={i} item xs={4} md={2} component={Link} to={`/actors/${character.id}`} style={{ textDecoration: \"none\" }}>\n                      <img className={classes.castImage} src={`https://image.tmdb.org/t/p/w500/${character.profile_path}`} alt={character.name} />\n                      <Typography color=\"textPrimary\">{character?.name}</Typography>\n                      <Typography color=\"textSecondary\">{character.character.split(\"/\")[0]}</Typography>\n                    </Grid>\n                  )\n              )\n              .slice(0, 6)}\n        </Grid>\n        <Grid item container style={{ marginTop: \"2rem\" }}>\n          <div className={classes.buttonsContainer}>\n            <Grid item xs={12} sm={6} className={classes.buttonsContainer}>\n              <ButtonGroup size=\"small\" variant=\"outlined\">\n                <Button target=\"_blank\" rel=\"noopener noreferrer\" href={data?.homepage} endIcon={<Language />}>\n                  Website\n                </Button>\n                <Button target=\"_blank\" rel=\"noopener noreferrer\" href={`https://www.imdb.com/title/${data?.imdb_id}`} endIcon={<MovieIcon />}>\n                  IMDB\n                </Button>\n                <Button onClick={() => setOpen(true)} href=\"#\" endIcon={<Theaters />}>\n                  Trailer\n                </Button>\n              </ButtonGroup>\n            </Grid>\n            <Grid item xs={12} sm={6} className={classes.buttonsContainer}>\n              <ButtonGroup size=\"small\" variant=\"outlined\">\n                <Button onClick={addToFavorites} endIcon={isMovieFavorited ? <FavoriteBorderOutlined /> : <Favorite />}>\n                  {isMovieFavorited ? \"Unfavorite\" : \"Favorite\"}\n                </Button>\n                <Button onClick={addToWatchlist} endIcon={isMovieWatchlisted ? <Remove /> : <PlusOne />}>\n                  Watchlist\n                </Button>\n                <Button endIcon={<ArrowBack />} sx={{ borderColor: \"primary.main\" }}>\n                  <Typography style={{ textDecoration: \"none\" }} component={Link} to=\"/\" color=\"inherit\" variant=\"subtitle2\">\n                    Back\n                  </Typography>\n                </Button>\n              </ButtonGroup>\n            </Grid>\n          </div>\n        </Grid>\n      </Grid>\n      <Box marginTop=\"5rem\" width=\"100%\">\n        <Typography variant=\"h4\" gutterBottom align=\"center\">\n          You Might Also Like\n        </Typography>\n        {recommendations ? <MovieList movies={recommendations} numberOfMovies={8} /> : <Box>SORRY, NOTHING WAS FOUND </Box>}\n      </Box>\n      <Modal closeAfterTransition className={classes.modal} open={open} onClose={() => setOpen(false)}>\n        {data?.videos?.results?.length > 0 && <iframe autoPlay className={classes.video} frameBorder=\"0\" title=\"Trailer\" src={`https://www.youtube.com/embed/${data.videos.results[0].key}`} allow=\"autoplay\" />}\n      </Modal>\n    </Grid>\n  );\n};\n\nexport default MovieInformation;\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Actors\\Actors.jsx",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\RatedCards\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Pagination\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Search\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Movie\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\NavBar\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\Actors\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieInformation\\styles.js",[],"C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\assets\\genres\\index.js",["156"],"import action from './action.png';\nimport adventure from './adventure.png';\nimport animation from './animation.png';\nimport comedy from './comedy.png';\nimport crime from './crime.png';\nimport documentary from './documentary.png';\nimport drama from './drama.png';\nimport family from './family.png';\nimport fantasy from './fantasy.png';\nimport horror from './horror.png';\nimport history from './history.png';\nimport mystery from './mystery.png';\nimport music from './music.png';\nimport romance from './romance.png';\nimport scienceFiction from './science fiction.png';\nimport thriller from './thriller.png';\nimport tvMovie from './tv movie.png';\nimport war from './war.png';\nimport western from './western.png';\n\nimport popular from './popular.png';\nimport topRated from './top rated.png';\nimport upcoming from './upcoming.png';\n\nexport default {\n  action,\n  adventure,\n  animation,\n  comedy,\n  crime,\n  documentary,\n  drama,\n  family,\n  fantasy,\n  horror,\n  history,\n  mystery,\n  music,\n  romance,\n  'science fiction': scienceFiction,\n  thriller,\n  'tv movie': tvMovie,\n  war,\n  western,\n\n  popular,\n  'top rated': topRated,\n  upcoming,\n};\n","C:\\Users\\HP\\OneDrive\\Desktop\\project-filmpire\\src\\components\\MovieList\\styles.js",[],{"ruleId":"157","severity":1,"message":"158","line":4,"column":10,"nodeType":"159","messageId":"160","endLine":4,"endColumn":21},{"ruleId":"157","severity":1,"message":"161","line":4,"column":23,"nodeType":"159","messageId":"160","endLine":4,"endColumn":36},{"ruleId":"157","severity":1,"message":"162","line":1,"column":8,"nodeType":"159","messageId":"160","endLine":1,"endColumn":13},{"ruleId":"163","severity":1,"message":"164","line":46,"column":6,"nodeType":"165","endLine":46,"endColumn":8,"suggestions":"166"},{"ruleId":"157","severity":1,"message":"167","line":1,"column":17,"nodeType":"159","messageId":"160","endLine":1,"endColumn":25},{"ruleId":"157","severity":1,"message":"168","line":23,"column":11,"nodeType":"159","messageId":"160","endLine":23,"endColumn":32},{"ruleId":"169","severity":1,"message":"170","line":42,"column":17,"nodeType":"171","endLine":42,"endColumn":105},{"ruleId":"169","severity":1,"message":"170","line":62,"column":19,"nodeType":"171","endLine":62,"endColumn":106},{"ruleId":"157","severity":1,"message":"172","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"173","line":4,"column":23,"nodeType":"159","messageId":"160","endLine":4,"endColumn":34},{"ruleId":"163","severity":1,"message":"174","line":20,"column":6,"nodeType":"165","endLine":20,"endColumn":8,"suggestions":"175"},{"ruleId":"163","severity":1,"message":"176","line":43,"column":6,"nodeType":"165","endLine":43,"endColumn":13,"suggestions":"177"},{"ruleId":"157","severity":1,"message":"172","line":1,"column":27,"nodeType":"159","messageId":"160","endLine":1,"endColumn":36},{"ruleId":"157","severity":1,"message":"178","line":5,"column":10,"nodeType":"159","messageId":"160","endLine":5,"endColumn":31},{"ruleId":"157","severity":1,"message":"179","line":2,"column":56,"nodeType":"159","messageId":"160","endLine":2,"endColumn":69},{"ruleId":"157","severity":1,"message":"168","line":16,"column":11,"nodeType":"159","messageId":"160","endLine":16,"endColumn":32},{"ruleId":"157","severity":1,"message":"180","line":26,"column":46,"nodeType":"159","messageId":"160","endLine":26,"endColumn":71},{"ruleId":"181","severity":1,"message":"182","line":25,"column":1,"nodeType":"183","endLine":49,"endColumn":3},"no-unused-vars","'createTheme' is defined but never used.","Identifier","unusedVar","'ThemeProvider' is defined but never used.","'React' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'history', and 'setMode'. Either include them or remove the dependency array.","ArrayExpression",["184"],"'useState' is defined but never used.","'genreIdOrCategoryName' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'useSelector' is defined but never used.","React Hook useEffect has missing dependencies: 'refetchFavorites' and 'refetchWatchlisted'. Either include them or remove the dependency array.",["185"],"React Hook useEffect has missing dependencies: 'dispatch' and 'sessionIdFromLocalStorage'. Either include them or remove the dependency array.",["186"],"'selectGenreOrCategory' is defined but never used.","'useMediaQuery' is defined but never used.","'isRecommendationsFetching' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},"Update the dependencies array to be: [dispatch, history, setMode]",{"range":"193","text":"194"},"Update the dependencies array to be: [refetchFavorites, refetchWatchlisted]",{"range":"195","text":"196"},"Update the dependencies array to be: [dispatch, sessionIdFromLocalStorage, token]",{"range":"197","text":"198"},[1696,1698],"[dispatch, history, setMode]",[995,997],"[refetchFavorites, refetchWatchlisted]",[1650,1657],"[dispatch, sessionIdFromLocalStorage, token]"]