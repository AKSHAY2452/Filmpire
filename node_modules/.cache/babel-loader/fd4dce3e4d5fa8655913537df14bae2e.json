{"ast":null,"code":"import _slicedToArray from\"C:/Users/HP/Downloads/filmpire-l2-forked/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from\"react\";import{Box,CircularProgress,useMediaQuery,Typography}from\"@mui/material\";import{useSelector}from\"react-redux\";import{selectGenreOrCategory}from\"../../features/currentGenreOrCategory\";import{useGetMoviesQuery}from\"../../services/TMDB\";import{MovieList}from\"..\";import{Pagination}from\"..\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Movies=function Movies(){var _useState=useState(1),_useState2=_slicedToArray(_useState,2),page=_useState2[0],setPage=_useState2[1];var _useSelector=useSelector(function(state){return state.currentGenreOrCategory;}),genreIdOrCategoryName=_useSelector.genreIdOrCategoryName,searchQuery=_useSelector.searchQuery;var _useGetMoviesQuery=useGetMoviesQuery({genreIdOrCategoryName:genreIdOrCategoryName,page:page,searchQuery:searchQuery}),data=_useGetMoviesQuery.data,error=_useGetMoviesQuery.error,isFetching=_useGetMoviesQuery.isFetching;var lg=useMediaQuery(function(theme){return theme.breakpoints.only(\"lg\");});var numberOfMovies=lg?16:18;if(isFetching){return/*#__PURE__*/_jsx(Box,{display:\"Flex\",justifyContent:\"center\",children:/*#__PURE__*/_jsx(CircularProgress,{size:\"4rem\"})});}if(!data.results.length){return/*#__PURE__*/_jsx(Box,{display:\"Flex\",alignItems:\"center\",mt:\"20px\",children:/*#__PURE__*/_jsxs(Typography,{variant:\"h4\",children:[\"No movies that match that name.\",/*#__PURE__*/_jsx(\"br\",{}),\"Please search for something else.\"]})});}if(error)return\"error has occured\";return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(MovieList,{movies:data,numberOfMovies:numberOfMovies}),/*#__PURE__*/_jsx(Pagination,{currentPage:page,setPage:setPage,totalPages:data.total_pages})]});};export default Movies;","map":{"version":3,"sources":["C:/Users/HP/Downloads/filmpire-l2-forked/src/components/Movies/Movies.jsx"],"names":["React","useState","useEffect","Box","CircularProgress","useMediaQuery","Typography","useSelector","selectGenreOrCategory","useGetMoviesQuery","MovieList","Pagination","Movies","page","setPage","state","currentGenreOrCategory","genreIdOrCategoryName","searchQuery","data","error","isFetching","lg","theme","breakpoints","only","numberOfMovies","results","length","total_pages"],"mappings":"+JAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,OAASC,GAAT,CAAcC,gBAAd,CAAgCC,aAAhC,CAA+CC,UAA/C,KAAiE,eAAjE,CACA,OAASC,WAAT,KAA4B,aAA5B,CAEA,OAASC,qBAAT,KAAsC,uCAAtC,CAEA,OAASC,iBAAT,KAAkC,qBAAlC,CACA,OAASC,SAAT,KAA0B,IAA1B,CACA,OAASC,UAAT,KAA2B,IAA3B,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACnB,cAAwBX,QAAQ,CAAC,CAAD,CAAhC,wCAAOY,IAAP,eAAaC,OAAb,eACA,iBAA+CP,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAK,CAACC,sBAAjB,EAAD,CAA1D,CAAQC,qBAAR,cAAQA,qBAAR,CAA+BC,WAA/B,cAA+BA,WAA/B,CACA,uBAAoCT,iBAAiB,CAAC,CAAEQ,qBAAqB,CAArBA,qBAAF,CAAyBJ,IAAI,CAAJA,IAAzB,CAA+BK,WAAW,CAAXA,WAA/B,CAAD,CAArD,CAAQC,IAAR,oBAAQA,IAAR,CAAcC,KAAd,oBAAcA,KAAd,CAAqBC,UAArB,oBAAqBA,UAArB,CACA,GAAMC,CAAAA,EAAE,CAAGjB,aAAa,CAAC,SAACkB,KAAD,QAAWA,CAAAA,KAAK,CAACC,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAX,EAAD,CAAxB,CAEA,GAAMC,CAAAA,cAAc,CAAGJ,EAAE,CAAG,EAAH,CAAQ,EAAjC,CAEA,GAAID,UAAJ,CAAgB,CACd,mBACE,KAAC,GAAD,EAAK,OAAO,CAAC,MAAb,CAAoB,cAAc,CAAC,QAAnC,uBACE,KAAC,gBAAD,EAAkB,IAAI,CAAC,MAAvB,EADF,EADF,CAKD,CAED,GAAI,CAACF,IAAI,CAACQ,OAAL,CAAaC,MAAlB,CAA0B,CACxB,mBACE,KAAC,GAAD,EAAK,OAAO,CAAC,MAAb,CAAoB,UAAU,CAAC,QAA/B,CAAwC,EAAE,CAAC,MAA3C,uBACE,MAAC,UAAD,EAAY,OAAO,CAAC,IAApB,0DAEE,aAFF,uCADF,EADF,CASD,CAED,GAAIR,KAAJ,CAAW,MAAO,mBAAP,CAEX,mBACE,oCACE,KAAC,SAAD,EAAW,MAAM,CAAED,IAAnB,CAAyB,cAAc,CAAEO,cAAzC,EADF,cAEE,KAAC,UAAD,EAAY,WAAW,CAAEb,IAAzB,CAA+B,OAAO,CAAEC,OAAxC,CAAiD,UAAU,CAAEK,IAAI,CAACU,WAAlE,EAFF,GADF,CAMD,CApCD,CAsCA,cAAejB,CAAAA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Box, CircularProgress, useMediaQuery, Typography } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\n\nimport { selectGenreOrCategory } from \"../../features/currentGenreOrCategory\";\n\nimport { useGetMoviesQuery } from \"../../services/TMDB\";\nimport { MovieList } from \"..\";\nimport { Pagination } from \"..\";\n\nconst Movies = () => {\n  const [page, setPage] = useState(1);\n  const { genreIdOrCategoryName, searchQuery } = useSelector((state) => state.currentGenreOrCategory);\n  const { data, error, isFetching } = useGetMoviesQuery({ genreIdOrCategoryName, page, searchQuery });\n  const lg = useMediaQuery((theme) => theme.breakpoints.only(\"lg\"));\n\n  const numberOfMovies = lg ? 16 : 18;\n\n  if (isFetching) {\n    return (\n      <Box display=\"Flex\" justifyContent=\"center\">\n        <CircularProgress size=\"4rem\" />\n      </Box>\n    );\n  }\n\n  if (!data.results.length) {\n    return (\n      <Box display=\"Flex\" alignItems=\"center\" mt=\"20px\">\n        <Typography variant=\"h4\">\n          No movies that match that name.\n          <br />\n          Please search for something else.\n        </Typography>\n      </Box>\n    );\n  }\n\n  if (error) return \"error has occured\";\n\n  return (\n    <div>\n      <MovieList movies={data} numberOfMovies={numberOfMovies} />\n      <Pagination currentPage={page} setPage={setPage} totalPages={data.total_pages} />\n    </div>\n  );\n};\n\nexport default Movies;\n"]},"metadata":{},"sourceType":"module"}